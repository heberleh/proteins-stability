aucs_peptides = [82.3,80.1,82.8,79.8,81.7,81.3,75.3,80.9,78.0,78.0,81.3,80.9,77.7,80.0,79.9,78.2,80.1,79.2,81.2,77.9,80.2,80.2,80.8,79.1,73.5,79.2,78.9,79.1,76.9,79.5,79.5,78.5,78.3,79.4,78.8,79.8,79.7,78.1,78.9,80.3,77.8,78.2,77.7,79.4,79.5,79.7,74.1,79.6,79.0,79.9,77.4,77.9,77.9,78.6,78.5,78.6,78.6,79.2,77.5,75.8,78.9,79.2,78.3,77.3,78.5,78.9,77.0,78.5,77.2,81.4,79.0,78.1,74.5,77.0,78.9,79.1,78.8,78.6,78.3,78.7,77.4,78.1,77.8,79.0,79.7,73.9,77.7,77.9,78.1,78.7,77.4,76.7,78.4,77.3,77.8,77.7,79.0,77.0,78.6,78.0,76.3,78.4,75.8,76.3,76.2,77.2,76.4,74.9,77.3,77.6,76.3,77.2,77.6,77.3,77.9,77.8,78.0,77.2,76.2,73.8,78.2,77.5,76.3,75.0,77.4,77.4,76.7,77.4,76.9,77.1,76.8,77.8,77.2,76.3,76.6,78.1,77.5,75.2,74.5,77.2,76.8,78.3,77.5,75.6,72.9,75.7,76.9,76.8,77.5,73.9,77.7,76.5,77.5,77.3,76.7,77.4,76.5,75.8,78.2,74.8,77.2,73.5,79.1,71.0,78.4,77.1,76.2,76.4,74.1,77.8,76.1,77.2,76.5,77.6,76.0,75.5,73.5,76.8,78.0,75.4,76.0,75.8,74.2,77.6,77.6,74.5,78.0,76.7,75.2,75.5,76.1,74.9,77.1,77.3,71.7,74.6,75.0,77.3,76.7,76.7,76.8,75.1,75.7,75.4,76.3,75.6,76.9,76.7,76.1,70.9,74.9,77.1,77.8,77.2,75.5,74.3,74.1,74.8,74.2,73.6,76.5,75.8,75.6,73.8,78.7,76.8,74.7,76.4,74.8,75.7,76.4,75.8,73.2,75.9,75.2,72.8,76.1,77.2,76.0,76.1,75.9,75.2,72.5,74.0,76.6,77.1,75.6,75.6,75.1,75.8,76.4,75.1,75.3,72.3,72.8,74.4,75.2,77.1,73.1,74.2,72.0,76.5,77.0,76.2,75.4,76.3,75.5,73.4,76.9,76.1,74.7,71.9,73.5,76.1,75.7,75.0,74.4,73.9,76.1,73.1,75.0,75.7,75.7,75.0,74.9,72.3,75.5,75.9,73.7,76.3,75.6,75.3,75.9,74.1,74.4,75.0,72.2,75.3,75.8,75.7,77.0,73.9,76.2,74.0,75.2,75.5,76.7,75.7,75.4,76.1,74.6,76.2,75.8,74.1,76.3,75.6,72.0,71.5,72.5,76.8,77.7,75.5,74.1,76.5,75.6,76.8,75.8,75.3,76.1,74.9,74.8,76.3,75.4,73.1,72.2,74.6,75.6,74.5,72.2,73.6,75.4,75.7,72.5,70.3,74.2,71.1,75.5,72.6,75.5,74.7,77.2,74.4,72.2,76.4,76.3,75.7,76.1,72.3,76.6,76.0,72.3,73.5,75.0,75.9,73.9,73.9,76.9,73.3,72.3,74.9,74.2,75.4,73.5,74.9,74.4,74.5,71.8,72.4,73.8,74.4,74.3,73.4,71.6,76.5,73.2,74.3,73.8,74.2,73.1,76.1,71.6,72.4,74.2,74.6,76.4,72.9,73.4,74.9,70.2,74.9,74.5,72.7,76.2,75.9,77.1,76.3,73.0,75.0,74.1,69.0,73.1,74.9,72.2,73.6,76.0,72.4,75.0,75.3,73.8,73.5,72.5,74.0,76.6,74.7,74.1,75.0,72.4,71.6,73.5,73.0,73.1,75.3,73.1,72.7,74.8,72.0,75.3,74.3,75.5,72.5,74.0,74.5,72.8,74.7,72.6,73.6,70.3,74.0,74.5,75.1,74.7,73.9,70.0,74.9,76.4,73.1,75.3,70.5,74.2,73.9,74.1,73.3,73.2,74.1,74.3,70.3,73.4,72.1,73.0,70.9,75.4,74.3,72.2,70.8,73.8,74.1,74.7,70.2,74.1,75.1,73.2,73.5,74.9,74.1,74.8,75.3,72.5,73.3,73.0,74.8,73.1,72.5,75.2,73.3,70.7,74.6,72.9,72.8,72.5,71.8,74.3,72.6,73.7,72.1,75.5,75.2,72.3,73.9,73.3,72.8,73.7,71.2,72.7,74.1,72.7,74.0,72.0,72.3,72.6,71.1,72.9,74.2,73.0,75.0,73.5,73.2,71.6,72.9,74.4,73.2,69.9,74.4,75.9,71.7,73.8,74.1,76.3,75.6,72.9,74.2,71.4,73.9,71.8,72.9,69.6,72.4,71.8,74.1,73.1,76.6,72.5,72.6,72.8,71.8,73.9,72.4,75.0,71.1,71.7,71.3,74.5,71.4,74.1,73.1,71.3,72.5,71.9,74.6,70.0,73.3,73.5,73.2,72.6,72.1,72.0,69.8,73.1,71.7,71.4,74.8,74.9,69.2,71.6,69.2,73.0,70.8,72.3,73.2,74.9,75.6,72.8,75.0,73.5,69.8,72.7,73.7,73.5,72.9,73.4,72.3,73.4,72.0,66.7,71.8,74.8,73.4,72.9,74.0,71.7,72.3,70.7,73.2,66.2,73.0,71.2,72.9,72.9,70.5,71.8,72.5,72.1,71.6,72.7,69.0,72.6,74.4,70.3,71.7,72.8,72.5,72.4,72.0,71.7,72.0,72.4,73.6,72.3,68.4,71.3,73.0,73.2,72.5,71.5,70.0,72.3,69.1,71.5,73.0,73.4,71.7,71.8,69.0,73.1,71.7,70.7,72.6,71.1,72.3,71.7,71.6,71.9,68.3,71.7,66.9,69.0,68.7,69.7,73.2,73.0,73.0,72.1,73.0,70.1,73.8,72.0,70.4,70.6,72.9,70.6,71.7,73.2,72.3,68.9,66.3,67.5,68.1,73.0,66.6,71.6,72.1,71.4,69.0,69.8,72.4,71.4,69.1,71.6,70.4,69.0,73.2,71.6,73.6,70.6,72.5,72.8,72.9,70.0,71.6,71.4,72.8,72.5,70.5,68.7,68.6,72.1,66.4,72.9,67.1,74.1,66.1,71.4,71.2,71.4,66.2,72.4,71.4,71.3,71.7,66.3,65.0,73.2,72.1,69.3,72.0,72.0,73.1,70.8,70.1,70.8,70.5,69.1,66.6,71.4,69.3,70.8,72.6,70.0,71.1,72.0,71.8,72.2,72.5,71.0,71.8,68.3,70.7,66.5,71.7,71.9,71.9,72.0,71.2,70.7,71.5,72.4,71.1,67.7,72.9,68.7,68.9,70.5,64.8,72.6,70.7,69.3,68.0,72.2,71.3,70.2,68.1,68.1,72.1,68.4,71.7,70.1,66.1,70.6,71.9,70.7,70.9,71.6,69.9,70.1,69.4,70.7,71.4,71.5,68.4,71.8,70.8,67.7,66.3,70.8,72.9,71.5,72.1,71.6,69.9,71.5,69.7,70.7,70.8,68.2,70.2,70.5,69.9,68.1,71.5,65.8,69.9,69.2,71.3,70.6,58.8,67.6,67.5,69.5,70.2,70.5,68.9,70.9,70.5,66.6,67.6,66.9,70.6,73.6,70.9,70.2,65.0,69.5,71.0,67.5,70.0,65.0,71.0,69.4,71.1,69.8,69.3,70.7,70.0,67.1,73.5,71.6,67.5,71.1,68.8,67.2,69.9,67.8,70.0,70.2,70.5,68.4,69.1,65.5,69.5,70.0,68.9,66.8,65.7,69.2,69.0,64.7,69.4,68.7,65.3,69.7,65.0,69.5,68.0,71.5,71.4,68.4,71.9,70.6,68.4,66.3,69.3,66.5,66.4,69.5,69.5,67.5,66.7,65.5,66.9,65.8,71.2,63.7,67.5,69.5,66.9,72.1,69.7,69.8,68.4,66.9,67.8,70.7,65.1,69.9,68.4,67.2,65.3,71.4,63.7,67.3,65.2,68.8,67.0,65.1,64.3,69.5,67.6,68.2,67.5,66.5,70.1,68.9,69.7,67.6,66.2,66.1,67.0,70.6,66.2,66.2,68.0,69.4,68.1,65.1,68.1,71.1,69.6,64.8,63.3,63.2,62.4,62.9,65.0,62.9,69.8,68.2,70.2,65.0,63.0,65.0,65.9,66.4,62.4,65.9,65.3,64.8,64.0,61.3,66.7,64.5,59.6,67.6,62.3,60.5,63.2,61.6,62.8,58.4,69.0,63.6,65.1,61.6,62.8,61.7,63.5,62.7,63.0,63.2,70.5,61.0,63.2,59.2,61.6,62.3,59.9,63.4,62.3,62.7,59.5,55.4,60.7,61.0,60.4,59.8,59.7,57.4,41.3,59.8,61.4,61.2,58.9,63.6,59.1,59.4,49.5,61.2,56.0,63.2,63.8,54.3,56.9,59.9,57.7,56.7]

aucs_proteins = [73.9,72.3,70.6,69.2,72.7,71.3,69.8,68.9,67.0,67.9,68.6,69.1,68.4,65.7,68.0,69.4,68.3,67.2,66.9,66.8,66.2,65.6,67.2,66.0,68.6,65.0,67.0,68.1,67.3,64.9,63.5,67.7,64.3,64.4,64.2,63.2,65.5,64.4,62.1,66.0,65.0,64.1,63.4,62.1,64.2,64.8,66.7,63.5,64.9,64.6,60.6,64.2,62.9,62.7,60.9,61.2,59.3,61.7,57.6,60.5,57.7,50.8,54.1]

s1 = 82.3
s2 = 82.8
s3 = 80.1
s4 = 73.9
s1_name = "$S_1$"
s2_name = "$S_2$"
s3_name = "$S_3$"
s4_name = "$S_4$"

## numpy is used for creating fake data
import numpy as np 
import matplotlib as mpl 

## agg backend is used to create plot as a .png file
mpl.use('agg')

import matplotlib.pyplot as plt 

data =  [aucs_proteins,aucs_peptides]
# Create a figure instance
#fig = plt.figure(1, figsize=(9, 6))

# Create an axes instance
fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 6), sharey=True)#fig.add_subplot(111)
# meanlineprops = dict(linestyle='--', linewidth=2.5, color='purple')
meanpointprops = dict(marker='D', markeredgecolor='black',
                      markerfacecolor='firebrick', alpha=0.7)
# Create the boxplot
bp = ax.boxplot(data,  meanprops=meanpointprops, meanline=False, showmeans=True)

# plot violin plot

ax.set_title('Predictive power of all possible signatures')
ax.set_xticklabels(['63 protein signatures','1024 peptide signatures'])

# ax.violinplot(data, positions=[1,2], showmeans=True, 
            # showextrema=True, showmedians=True, bw_method=0.5)
ax.set_ylim([30,90])

x_s = [1,2,2,2] 
y_s = [s4,s1,s2,s3]
labels = [s4_name, s1_name, s2_name, s3_name]
#plt.plot(x_s, y_s, 'ro')

x,y = 1,s4
ax.annotate(
        s4_name,
        xy=(x, y), xytext=(-20, 10),
        textcoords='offset points', ha='right', va='bottom',
        bbox=dict(boxstyle='round,pad=0.2', fc='gray', alpha=0.4),
        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))

x,y = 2,s1
ax.annotate(
        s1_name,
        xy=(x, y), xytext=(-30, 10),
        textcoords='offset points', ha='right', va='bottom',
        bbox=dict(boxstyle='round,pad=0.2', fc='gray', alpha=0.4),
        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0')) 
        
x,y = 2,s2                       
ax.annotate(
        s2_name,
        xy=(x, y), xytext=(45, 0),
        textcoords='offset points', ha='right', va='bottom',
        bbox=dict(boxstyle='round,pad=0.2', fc='gray', alpha=0.4),
        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))

x,y = 2,s3        
ax.annotate(
        s3_name,
        xy=(x, y), xytext=(45, -10),
        textcoords='offset points', ha='right', va='bottom',
        bbox=dict(boxstyle='round,pad=0.2', fc='gray', alpha=0.5),
        arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0'))

print bp['means']
print bp['medians']

plt.ylabel("Cross-validation ROC AUC (%)", fontdict=None, labelpad=None)

ax.legend([bp['means'][0], bp['medians'][0]], ['Mean', 'Median'], loc='lower left')

# Save the figure
fig.savefig('boxplot_proteins_vs_peptides_signatures_AUC.png', bbox_inches='tight')